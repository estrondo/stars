stars.simulator.entity {
  validator {
    min-star-mass = ${STAR_SIMULATOR_ENTITY_VALIDATOR_MIN_STAR_MASS}
    max-star-mass = ${STAR_SIMULATOR_ENTITY_VALIDATOR_MAX_STAR_MASS}
    max-stars = ${STAR_SIMULATOR_ENTITY_VALIDATOR_MAX_STARS}
    max-black-hole-mass = ${STAR_SIMULATOR_ENTITY_VALIDATOR_MAX_BLACK_HOLE_MASS}
  }
}


stars.kafka.consumer: ${akka.kafka.consumer} {
  service-name = kafka_consumer
  kafka-clients {
  }
}

stars.kafka.producer: ${akka.kafka.producer} {
  service-name = kafka_producer
  kafka-clients {

  }
}

akka {

  actor.provider = cluster

  actor.serializers {
    jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer",
    proto = "akka.remote.serialization.ProtobufSerializer"
    command-serializer = "simulator.entity.Message$CommandSerializer"
  }

  actor.serialization-bindings {
    "simulation.protocol.CreateSimulation" = proto
    "simulator.entity.State$Empty" = jackson-cbor
    "simulator.entity.Event$Accepted" = jackson-cbor
    "simulator.entity.Message$Command" = command-serializer
  }

  extensions = ["akka.management.cluster.bootstrap.ClusterBootstrap"]

  management.cluster.bootstrap {

    contact-point-discovery {
      discovery-method = akka.discovery
      service-name = stars-simulator
      service-name = ${?AKKA_CLUSTER_SERVICE_NAME}
      required-contact-point-nr = 1
    }
  }

  discovery {
    method = aggregate

    aggregate {
      discovery-methods: ["config", "akka-dns"]
    }

    config.services {

      stars-simulator {
        endpoints = [
          {
            host = ${}
          }
        ]
      }

      kafka_producer {
        endpoints = [
          {
            host = ${KAFKA_PRODUCER_HOST}
            port = ${KAFKA_PRODUCER_PORT}
          }
        ]
      }

      kafka_consumer {
        endpoints = [
          {
            host = ${KAFKA_CONSUMER_HOST}
            port = ${KAFKA_CONSUMER_PORT}
          }
        ]
      }
    }
  }
}
